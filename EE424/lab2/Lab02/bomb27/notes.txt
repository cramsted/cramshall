scanf returns the number of scanned input args
============================================================
phase 3:

rcx = 8(rsp) // second input argument
rdx = 12(rsp); // first input argument
rsi = 0x40246a;
rax = 0;
scanf()
if (rax <= 1) explode_bomb
else continue

if (12(sp) <= 7)
continue
else explode_bomb

rax = 12(sp)

8(sp) needs to equal 0xad, 0x1ec, 0x41, 0x280, 
					0xd5, 0x2cc, 0x227, 0x366

7 0xad 0x1ec 0x41 0x280 0xd5 0x2cc 0x227 0x366

7 0x366 0x227 0x2cc 0xd5 0x280 0x41 0x1ec 0xad

============================================================
phase 4:
rcx = 8(sp) // second input - needs to be 7
rdx = 12(sp) // first input - needs to be <= 14 and positive

scanf - need 2 inputs

rax = 12(sp) // first input - needs to be 0 or positive
test rax, rax
if sign bit of rax (first input) is set, explode_bomb
else continue

cmp 0xe, rax
if greater or equal, explode bomb

mov 0xe, rdx // third parm
mov 0, rsi // second parm
mov 12(sp), rdi // first parm
func4(first input, 0, 0xe)
 - needs to return a 7

func4(a, b, c):
// a == first input
// b == 0
// c == 0xe or 14
result = c - b;
temp = result;

============================================================
phase 5:
expects a string of length 6

sp initially = 0x7fffffffe628
sp-10 to make room on stack:
0x7fffffffe610
ax points to 0x7fffffffe610+6 = 0x7fffffffe616


before string_length:
rdi first, then rbx points to our input string;


rdx points to local array for their string?
rcx is current character

rsi points to the end (well, 6 past beginning) of our string

-- string_not_equal
1st param: stack pointer (holds "aduier")
2nd param: rsi (holds 0x4023a0 - ptr to string "devils")


rsi: devils

rdx: m a d u i e ...
I think buffer overflow needs to happen here!

in bomb-strings:
maduiersnfotvbylInvalid phase%s

modifying line 267 modBomb binary

=========================================================
phase 6:
expects 6 numbers
r12 points to our input
rbp then points to our input
first number should be from 1 - 6
it's an index to our input

first and second numbers should be different
none of the numbers should be the same as the first number

all inputs need to be between 1 and 6

r13 is outer iterator
rbx is inner iterator
rbp points to curr element in input array
rdx = rbp[0]

for (int r13 = 1; i < 6; r13++) {
	for (int rbx = r13; j < 6; j++) {
		temp = rbx;
		rdx = rbp[0];
		
		if (input[temp] == rdx)
			explode
	}
	rbp++;
}

for(int i = 0; i < 6; i++){
	r12[i] -= 7; 
}

rbx = 0; // iterator to our array
r8 = &input[0]; // ptr to beginning of our input array
rbp = 1;
rsi = ptr to an array? of ints?
rdi = rsp;
goto 0x400fe6;

0x400fcd:
	rdx = rdx[8];
	rax += 1;
	if (rax != rcx) goto 0x400fcd;

0x400fd8:
	rdi[rbx*2] = rdx;
	rbx++; // integer pointer addition
	if (rbx == 0x18) // done iterating through our array
	goto 0x400ff6;

0x400fe6:
	rcx = r8[rbx]; // next element of our array
	rax = rbp;
	rdx = rsi;
	if (rcx > 1) goto 0x400fcd;
	goto 0x400fd8;



0x400ff6:
rbx = rsp[0];
rax = rsp[8];
rbx[8] = rax;
rdx = rsp[10];
rax[8] = rdx;
rax = rsp[24];
rdx[8] = rax;
rdx = rsp[32];
rax[8] = rdx;
rax = rsp[40];
rdx[8] = rax;
rax[8] = 0;

rbp = 0;

loop:
rax = rbx[8];
rdx = rbx[0];
if (rdx >= rax[0]) continue;
else explode;
rbx = rbx[8];
rbp += 1;
if (rbp != 5) goto loop;
success!


sequences that don't work:
1 2 3 4 5 6
6 1 5 2 4 3
1 6 2 5 3 4
1 3 2 4 5 6
1 4 2 3 5 6
1 5 2 3 4 6
1 6 2 3 4 5
2 1 3 4 5 6
3 4 2 5 1 6
4 3 5 2 6 1
3 2 1 4 5 6

table:
indexes:   1,   2,   3,   4,   5,   6
address: 700, 710, 720, 730, 740, 750
value:   581, 758, 110, 275, 621, 260

every time we need:
*rbx >= *rax


rbx points to old rax
=======
1 2 3 4 5 6
rax = 758,

2 1 3 4 5 6
rax = 581,110,275
rax addresses: 700, 720, 730
rbx = 710, 700, 720

3 2 1 4 5 6
rax = 758
rax addresses: 710
rbx = 720

4 3 2 1 5 6
rax values = 110, 758
rax addresses: 720,710
rbx values = 275, 110
rbx addresses: 730,720

3 4 2 1 5 6
rax values: 275
rax addresses: 730
rbx values: 110
rbx addresses: 720

5 1 4 6 3 2
rax values: 581
rax addresses: 700, 730
rbx values: 621
rbx addresses: 740, 700

